@model SalesOrder.DTOs.OrderDto
@{
    ViewData["Title"] = "Edit - Sales Order";
    Layout = "_Layout";
}

<div class="container-fluid">
    <div class="card-header bg-soft-blue text-dark">
        <h3 class="mb-0 font-weight-bold">Edit - Sales Order</h3>
    </div>
    <form asp-action="Edit" method="post">
        <input type="hidden" asp-for="SoOrderId" />
        <div class="card mb-4">
            <div class="card-header bg-soft-blue text-dark text-center">
                <h5 class="mb-0">Sales Order Information</h5>
            </div>
            <div class="card-body bg-light">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="OrderNo">Sales Order Number</label>
                            <input asp-for="OrderNo" class="form-control" readonly>
                            <span asp-validation-for="OrderNo" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="OrderDate">Order Date</label>
                            <input asp-for="OrderDate" class="form-control" type="date">
                            <span asp-validation-for="OrderDate" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="ComCustomerId">Customer</label>
                            <select asp-for="ComCustomerId" class="form-control" asp-items="@(new SelectList(Model.Customers, "ComCustomerId", "CustomerName"))">
                                <option value="">-- Select Customer --</option>
                            </select>
                            <span asp-validation-for="ComCustomerId" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Address">Address</label>
                            <textarea asp-for="Address" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Address" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-header bg-soft-blue text-dark">
                <h5 class="mb-0">Detail Item Information</h5>
            </div>
            <div class="card-body">
                <button type="button" id="addItemBtn" class="btn btn-soft-blue mb-3">Add Item</button>
                <span class="text-warning ml-2">Eg: Item</span>
                <table id="itemTable" class="table table-striped">
                    <thead class="bg-soft-blue text-dark">
                        <tr>
                            <th>No</th>
                            <th>Action</th>
                            <th>Item Name</th>
                            <th>Qty</th>
                            <th>Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div id="itemPagination"></div>
                <div class="row">
                    <div class="col-md-12 text-center"> 
                        <p>Total Item: <span id="totalItem">0</span></p>
                        <p>Total Amount: <span id="totalAmount">0</span></p>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-soft-blue">Save Changes</button>
            <a asp-action="Index" class="btn btn-light border">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function() {
            var items = @Html.Raw(Json.Serialize(Model.Items)) || [];
            var itemsPerPage = 5;
            var currentPage = 1;

            function renderItems() {
                var tbody = $('#itemTable tbody');
                tbody.empty();
                var startIndex = (currentPage - 1) * itemsPerPage;
                var endIndex = startIndex + itemsPerPage;
                var pageItems = items.slice(startIndex, endIndex);

                pageItems.forEach(function(item, index) {
                  tbody.append(`
                      <tr>
                          <td>${startIndex + index + 1}</td>
                          <td>
                              <button type="button" class="btn btn-sm btn-soft-blue edit-item" data-index="${startIndex + index}">
                                  <i class="fas fa-edit"></i> Edit
                              </button>
                              <button type="button" class="btn btn-sm btn-soft-red delete-item" data-index="${startIndex + index}">
                                  <i class="fas fa-trash"></i> Delete
                              </button>
                          </td>
                          <td>${item.itemName}</td>
                          <td>${item.quantity}</td>
                          <td>${item.price.toFixed(2)}</td>
                          <td>${(item.quantity * item.price).toFixed(2)}</td>
                      </tr>
                  `);
              });
              updateTotals();
              renderPagination();
            }

            function renderPagination() {
                var totalPages = Math.ceil(items.length / itemsPerPage);
                var paginationHtml = '<nav><ul class="pagination">';
                for (var i = 1; i <= totalPages; i++) {
                    paginationHtml += `<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                }
                paginationHtml += '</ul></nav>';
                $('#itemPagination').html(paginationHtml);
            }

            $(document).on('click', '#itemPagination .page-link', function(e) {
                e.preventDefault();
                currentPage = parseInt($(this).data('page'));
                renderItems();
            });

            function updateTotals() {
                var totalItem = items.reduce((sum, item) => sum + item.quantity, 0);
                var totalAmount = items.reduce((sum, item) => sum + (item.quantity * item.price), 0);
                $('#totalItem').text(totalItem);
                $('#totalAmount').text(totalAmount.toFixed(2));
            }

            $('#addItemBtn').click(function() {
                items.push({ itemName: '', quantity: 0, price: 0 });
                currentPage = Math.ceil(items.length / itemsPerPage);
                renderItems();
                editItem(items.length - 1);
            });

            $(document).on('click', '.edit-item', function() {
                var index = $(this).data('index');
                editItem(index);
            });

            $(document).on('click', '.delete-item', function() {
                var index = $(this).data('index');
                items.splice(index, 1);
                renderItems();
            });

            function editItem(index) {
                var item = items[index];
                var row = $(`#itemTable tbody tr:eq(${index % itemsPerPage})`);
                row.html(`
                  <td>${index + 1}</td>
                  <td>
                      <button type="button" class="btn btn-sm btn-soft-blue save-item" data-index="${index}">
                          <i class="fas fa-save"></i> Save
                      </button>
                      <button type="button" class="btn btn-sm btn-light border cancel-edit" data-index="${index}">
                          <i class="fas fa-times"></i> Cancel
                      </button>
                  </td>
                  <td><input type="text" class="form-control" value="${item.itemName}"></td>
                  <td><input type="number" class="form-control" value="${item.quantity}"></td>
                  <td><input type="number" class="form-control" value="${item.price}"></td>
                  <td>${(item.quantity * item.price).toFixed(2)}</td>
              `);
            }

            $(document).on('click', '.save-item', function() {
                var index = $(this).data('index');
                var row = $(`#itemTable tbody tr:eq(${index % itemsPerPage})`);
                items[index] = {
                    itemName: row.find('td:eq(2) input').val(),
                    quantity: parseInt(row.find('td:eq(3) input').val()),
                    price: parseFloat(row.find('td:eq(4) input').val())
                };
                renderItems();
            });

            $(document).on('click', '.cancel-edit', function() {
                renderItems();
            });

            $('form').submit(function(e) {
                e.preventDefault();
                var formData = new FormData(this);
                formData.append('Items', JSON.stringify(items));

                $.ajax({
                    url: $(this).attr('action'),
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function() {
                        window.location.href = '@Url.Action("Index", "SalesOrder")';
                    },
                    error: function(xhr, status, error) {
                        console.error(error);
                        alert('An error occurred while saving the order. Please try again.');
                    }
                });
            });

            renderItems();
        });
    </script>
}