@model SalesOrder.DTOs.OrderDto
@{
    ViewData["Title"] = "Add New - Sales Order";
    Layout = "_Layout";
}

<div class="container-fluid">
    <div class="card-header bg-soft-blue text-dark">
        <h3 class="mb-0 font-weight-bold">Add New - Sales Order</h3>
    </div>
    <form asp-action="Add" method="post">
        <div class="card mb-4">
            <div class="card-header bg-soft-blue text-dark text-center">
                <h5 class="mb-0">Sales Order Information</h5>
            </div>
            <div class="card-body bg-light">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="OrderNo">Sales Order Number</label>
                            <input asp-for="OrderNo" class="form-control" required>
                            <span asp-validation-for="OrderNo" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="OrderDate">Order Date</label>
                            <input asp-for="OrderDate" class="form-control" type="date" required>
                            <span asp-validation-for="OrderDate" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="ComCustomerId">Customer</label>
                            <select asp-for="ComCustomerId" class="form-control" asp-items="@(new SelectList(Model.Customers, "ComCustomerId", "CustomerName"))" required>
                                <option value="">-- Select Customer --</option>
                            </select>
                            <span asp-validation-for="ComCustomerId" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Address">Address</label>
                            <textarea asp-for="Address" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Address" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-header bg-soft-blue text-dark">
                <h5 class="mb-0">Detail Item Information</h5>
            </div>
            <div class="card-body">
                <button type="button" id="addItemBtn" class="btn btn-soft-blue mb-3">Add Item</button>
                <span class="text-warning ml-2">Eg: Item</span>
                <table id="itemTable" class="table table-striped">
                    <thead class="bg-soft-blue text-dark">
                        <tr>
                            <th>No</th>
                            <th>Action</th>
                            <th>Item Name</th>
                            <th>QTY</th>
                            <th>Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div id="itemPagination" class="d-flex justify-content-between align-items-center">
                    <nav aria-label="Page navigation">
                        <ul class="pagination"></ul>
                    </nav>
                    <span id="itemCount"></span>
                </div>
                <div class="row mt-3">
                    <div class="col-md-6">
                        <p>Total Item: <span id="totalItem">0</span></p>
                    </div>
                    <div class="col-md-6 text-right">
                        <p>Total Amount: <span id="totalAmount">0</span></p>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-soft-blue">Save</button>
            <a asp-action="Index" class="btn btn-light border">Close</a>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function() {
            var items = [];
            var itemsPerPage = 5;
            var currentPage = 1;

            function renderItems() {
                var tbody = $('#itemTable tbody');
                tbody.empty();
                var startIndex = (currentPage - 1) * itemsPerPage;
                var endIndex = startIndex + itemsPerPage;
                var pageItems = items.slice(startIndex, endIndex);

                pageItems.forEach(function(item, index) {
                    tbody.append(`
                        <tr>
                            <td>${startIndex + index + 1}</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-primary edit-item" data-index="${startIndex + index}">
                                    <i class="bi bi-pencil"></i>  Edit
                                </button>
                                <button type="button" class="btn btn-sm btn-danger delete-item" data-index="${startIndex + index}">
                                    <i class="bi bi-trash"></i>  Delete
                                </button>
                            </td>
                            <td>${item.itemName}</td>
                            <td>${item.quantity}</td>
                            <td>${item.price.toFixed(2)}</td>
                            <td>${(item.quantity * item.price).toFixed(2)}</td>
                        </tr>
                    `);
                });
                updateTotals();
                renderPagination();
            }

            function renderPagination() {
                var totalPages = Math.ceil(items.length / itemsPerPage);
                var paginationHtml = '<ul class="pagination">';
                paginationHtml += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage - 1}">&laquo;</a></li>`;
                for (var i = 1; i <= totalPages; i++) {
                    paginationHtml += `<li class="page-item ${i === currentPage ? 'active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                }
                paginationHtml += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage + 1}">&raquo;</a></li>`;
                paginationHtml += '</ul>';
                $('#itemPagination').html(paginationHtml);
            }

            $(document).on('click', '#itemPagination .page-link', function(e) {
                e.preventDefault();
                var page = $(this).data('page');
                if (page && page >= 1 && page <= Math.ceil(items.length / itemsPerPage)) {
                    currentPage = page;
                    renderItems();
                }
            });

            function updateTotals() {
                var totalItem = items.reduce((sum, item) => sum + item.quantity, 0);
                var totalAmount = items.reduce((sum, item) => sum + (item.quantity * item.price), 0);
                $('#totalItem').text(totalItem);
                $('#totalAmount').text(totalAmount.toFixed(2));
            }

            $('#addItemBtn').click(function() {
                items.push({ itemName: '', quantity: 0, price: 0 });
                currentPage = Math.ceil(items.length / itemsPerPage);
                renderItems();
                editItem(items.length - 1);
            });

            $(document).on('click', '.edit-item', function() {
                var index = $(this).data('index');
                editItem(index);
            });

            $(document).on('click', '.delete-item', function() {
                var index = $(this).data('index');
                items.splice(index, 1);
                renderItems();
            });

            function editItem(index) {
                var item = items[index] || { itemName: '', quantity: 0, price: 0 };
                var row = $(`#itemTable tbody tr:eq(${index % itemsPerPage})`);
                row.html(`
                    <td>${index + 1}</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-soft-blue save-item" data-index="${index}">
                            <i class="fas fa-save"></i>  Save
                        </button>
                        <button type="button" class="btn btn-sm btn-light border cancel-edit" data-index="${index}">
                            <i class="fas fa-times"></i>  Cancel
                        </button>
                    </td>
                    <td><input type="text" class="form-control" value="${item.itemName}"></td>
                    <td><input type="number" class="form-control" value="${item.quantity}"></td>
                    <td><input type="number" class="form-control" value="${item.price}"></td>
                    <td>${(item.quantity * item.price).toFixed(2)}</td>
                `);
            }

            $(document).on('click', '.save-item', function() {
                var index = $(this).data('index');
                var row = $(`#itemTable tbody tr:eq(${index % itemsPerPage})`);
                var newItem = {
                    itemName: row.find('td:eq(2) input').val().trim(),
                    quantity: parseInt(row.find('td:eq(3) input').val()) || 0,
                    price: parseFloat(row.find('td:eq(4) input').val()) || 0
                };
                
                if (newItem.itemName !== '' || newItem.quantity !== 0 || newItem.price !== 0) {
                    items[index] = newItem;
                    if (index === items.length - 1) {
                        items.push({ itemName: '', quantity: 0, price: 0 });
                    }
                } else if (index === items.length - 1) {
                    // If the last row is empty, don't add a new row
                    return;
                }
                
                renderItems();
                if (index === items.length - 2) {
                    editItem(items.length - 1);
                }
            });

            $(document).on('click', '.cancel-edit', function() {
                var index = $(this).data('index');
                if (index === items.length - 1 && items[index].itemName === '' && items[index].quantity === 0 && items[index].price === 0) {
                    items.pop();
                }
                renderItems();
            });

            $('form').submit(function(e) {
                e.preventDefault();
                // Remove the last item if it's empty
                if (items.length > 0) {
                    var lastItem = items[items.length - 1];
                    if (lastItem.itemName === '' && lastItem.quantity === 0 && lastItem.price === 0) {
                        items.pop();
                    }
                }
                var formData = new FormData(this);
                formData.append('Items', JSON.stringify(items));

                $.ajax({
                    url: $(this).attr('action'),
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function() {
                        window.location.href = '@Url.Action("Index", "SalesOrder")';
                    },
                    error: function(xhr, status, error) {
                        console.error(error);
                        alert('An error occurred while saving the order. Please try again.');
                    }
                });
            });

            renderItems();
        });
    </script>
}